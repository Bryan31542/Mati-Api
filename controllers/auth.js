const { response } = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/user");
const { generateJWT } = require("../helpers/generate-jwt");
const { googleVerify } = require("../helpers/google-verify");

const login = async (req, res = response) => {
  const { email, password } = req.body;

  try {
    // check if email exist
    const user = await User.findOne({ email });

    // checking if the user exist
    if (!user) {
      return res.status(400).json({
        error: "User / Password not ok",
      });
    }

    // check if user is active
    if (!user.status) {
      return res.status(400).json({
        error_deleted: "User not active",
      });
    }

    // check if password is correct
    const isMatch = bcrypt.compareSync(password, user.password);

    // checking if the password is correct
    if (!isMatch) {
      return res.status(400).json({
        error: "User / Password not ok",
      });
    }

    // generate JWT
    const token = await generateJWT(user.id);

    // sending the response
    res.json({
      msg: "Login successfully",
      role: user.role,
      token,
    });
  } catch (error) {
    // sending the error if the user could not login
    return res.status(500).json({
      error: "Talk to the developer",
    });
  }
};

const googleSignIn = async (req, res = response) => {
  // getting the token generated by google
  const { id_token } = req.body;

  try {
    // getting the values from google user
    const { name, avatar, email } = await googleVerify(id_token);

    // checking if the user exist
    let user = await User.findOne({ email });

    // if user not exist, create new user
    if (!user) {
      const data = {
        name,
        email,
        password: "xd",
        avatar,
        google: true,
      };
      // creating the new user and saving it in the db
      user = new User(data);
      await user.save();
    }

    // check if user exist in db but the user is not active
    if (!user.status) {
      return res.json({
        msg: "User not active, talk to admin",
      });
    }

    // generate JWT
    const token = await generateJWT(user.id);
    console.log(token);

    // sending the response
    res.json({
      msg: "Google sign in successfully",
      user,
      token,
    });
  } catch (error) {
    // sending the error if the user could not login
    console.log(error);
    return res.json({
      msg: "Talk to the developer, token could not be verified",
    });
  }
};

const WhoAmI = async (req, res = response) => {
  const { token } = req.body;

  try {
    const tokenDecoded = await jwt.decode(token);

    return res.json({
      msg: "You are logged in",
      user: tokenDecoded,
    });
  } catch (error) {
    console.log(error);
    return res.json({
      msg: "You are not logged in",
    });
  }
};

module.exports = { login, googleSignIn, WhoAmI };
